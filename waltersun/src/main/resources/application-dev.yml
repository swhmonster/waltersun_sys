server:
  port: 2021
  servlet:
    session:
      cookie:
        http-only: true
    context-path: /api

spring:
  datasource:
    url: jdbc:mysql://10.20.20.175:23061/dbtrade?useUnicode=true&characterEncoding=utf8&allowMultiQueries=TRUE
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: dbtrade
    password: dbtrade
  redis:
    host: 10.20.158.28
    port: 6379
    password: redis
    # Redis数据库索引（默认为0）
    database: 0
    # 连接超时时间（毫秒）
    timeout: 5000
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 8
  kafka:
    bootstrap-servers: 10.20.158.28:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

mybatis:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

logging:
  file:
    name: waltersun.log
  level:
    root: debug

async:
  executor:
    thread:
      core_pool_size: 5
      max_pool_size: 5
      queue_capacity: 99999
      name:
        prefix: async-service-

# 下载文件扫描路径
downloadPath: E:\tempnew\

# jetcache缓存相关配置
jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  local:
    default:
      type: linkedhashmap
      keyConvertor: fastjson
      limit: 100
  remote:
    default:
      type: redis
      # type: redis.lettuce
      keyConvertor: fastjson
      valueEncoder: java
      valueDecoder: java
      poolConfig:
        minIdle: 5
        maxIdle: 20
        maxTotal: 50
      # Jedis客户端配置方式
      host: 10.20.158.28
      port: 6379
      password: redis
      # sentinels: 127.0.0.1:26379 , 127.0.0.1:26380, 127.0.0.1:26381
      # masterName: mymaster
      # lettuce客户端配置方式
      # uri格式：redis://密码@ip:端口/redis库名?timeout=5s
      # uri: redis://123456@127.0.0.1:6379/1?timeout=5s

#自定义开关项
switch:
  # 是否开启mq监听
  kafka:
    enable: false
  rocketmq:
    enable: false

# rocketmq配置
rocketmq:
  name-server: 10.20.147.206:9876
  producer:
    # 生产者分组
    group: waltersun-producer-group
    # 发送消息超时时间，单位：毫秒。默认为 3000 。
    send-message-timeout: 3000
    # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
    compress-message-body-threshold: 4096
    # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
    max-message-size: 4194304
    # 同步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-failed: 2
    # 异步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-async-failed: 2
    # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
    retry-next-server: false
    # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
    access-key:
    # Secret Key
    secret-key:
    # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
    enable-msg-trace: true
    # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC
  # 结合注解@RocketMQMessageListener，一般不需要配置消费者相关内容
#  consumer:
#    # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
#    listeners:
#      my-group:
#        my-topic999: false # 关闭 test-consumer-group 对 topic1 的监听消费